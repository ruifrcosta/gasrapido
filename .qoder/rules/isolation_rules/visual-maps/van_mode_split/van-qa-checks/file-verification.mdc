---
description: Process map for VAN QA file verification
globs: van-qa-checks/file-verification.mdc
alwaysApply: false
---
# VAN QA: FILE VERIFICATION

> **TL;DR:** This component verifies that all required files exist and are in the correct state before proceeding with implementation.

## 0Ô∏è‚É£ FILE VERIFICATION PROCESS

```mermaid
graph TD
    Start["File Verification"] --> CheckMemoryBank["Check Memory Bank<br>Structure"]
    CheckMemoryBank --> MBExists{"Memory Bank<br>Exists?"}
    
    MBExists -->|"No"| CreateMB["Create Memory Bank<br>Structure"]
    MBExists -->|"Yes"| VerifyMB["Verify Memory Bank<br>Contents"]
    
    CreateMB --> VerifyCreation{"Creation<br>Successful?"}
    VerifyCreation -->|"No"| Abort["‚õî ABORT QA<br>Fix Memory Bank First"]
    VerifyCreation -->|"Yes"| VerifyMB
    
    VerifyMB --> StructureCheck{"Structure<br>Valid?"}
    StructureCheck -->|"No"| FixStructure["Fix Memory Bank<br>Structure"]
    StructureCheck -->|"Yes"| CheckCoreFiles["Check Core<br>Files"]
    
    FixStructure --> VerifyFix{"Fix<br>Successful?"}
    VerifyFix -->|"No"| Abort
    VerifyFix -->|"Yes"| CheckCoreFiles
    
    CheckCoreFiles --> CheckTasks{"tasks.md<br>Exists?"}
    CheckTasks -->|"No"| CreateTasks["Create tasks.md"]
    CheckTasks -->|"Yes"| VerifyTasks["Verify tasks.md<br>Content"]
    
    CreateTasks --> VerifyTaskCreation{"Creation<br>Successful?"}
    VerifyTaskCreation -->|"No"| Abort
    VerifyTaskCreation -->|"Yes"| VerifyTasks
    
    VerifyTasks --> TasksValid{"tasks.md<br>Valid?"}
    TasksValid -->|"No"| FixTasks["Fix tasks.md<br>Content"]
    TasksValid -->|"Yes"| CheckContext["Check<br>activeContext.md"]
    
    FixTasks --> VerifyTaskFix{"Fix<br>Successful?"}
    VerifyTaskFix -->|"No"| Abort
    VerifyTaskFix -->|"Yes"| CheckContext
    
    CheckContext --> ContextExists{"activeContext.md<br>Exists?"}
    ContextExists -->|"No"| CreateContext["Create activeContext.md"]
    ContextExists -->|"Yes"| VerifyContext["Verify activeContext.md<br>Content"]
    
    CreateContext --> VerifyContextCreation{"Creation<br>Successful?"}
    VerifyContextCreation -->|"No"| Abort
    VerifyContextCreation -->|"Yes"| VerifyContext
    
    VerifyContext --> ContextValid{"activeContext.md<br>Valid?"}
    ContextValid -->|"No"| FixContext["Fix activeContext.md<br>Content"]
    ContextValid -->|"Yes"| CheckProgress["Check<br>progress.md"]
    
    FixContext --> VerifyContextFix{"Fix<br>Successful?"}
    VerifyContextFix -->|"No"| Abort
    VerifyContextFix -->|"Yes"| CheckProgress
    
    CheckProgress --> ProgressExists{"progress.md<br>Exists?"}
    ProgressExists -->|"No"| CreateProgress["Create progress.md"]
    ProgressExists -->|"Yes"| VerifyProgress["Verify progress.md<br>Content"]
    
    CreateProgress --> VerifyProgressCreation{"Creation<br>Successful?"}
    VerifyProgressCreation -->|"No"| Abort
    VerifyProgressCreation -->|"Yes"| VerifyProgress
    
    VerifyProgress --> ProgressValid{"progress.md<br>Valid?"}
    ProgressValid -->|"No"| FixProgress["Fix progress.md<br>Content"]
    ProgressValid -->|"Yes"| FileVerificationComplete["‚úÖ FILE VERIFICATION<br>COMPLETE"]
    
    FixProgress --> VerifyProgressFix{"Fix<br>Successful?"}
    VerifyProgressFix -->|"No"| Abort
    VerifyProgressFix -->|"Yes"| FileVerificationComplete
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style MBExists fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style CreateMB fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style VerifyCreation fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style Abort fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style StructureCheck fill:#ff0000,stroke:#990000,color:white,stroke-width:3px
    style FixStructure fill:#ff5555,stroke:#dd3333,color:white
    style VerifyFix fill:#ff5555,stroke:#dd3333,color:white
    style FileVerificationComplete fill:#10b981,stroke:#059669,color:white
```

### File Verification Implementation:
```powershell
# Example: Verify all required files exist and are valid
function Verify-Files {
    $requiredFiles = @(
        "tasks.md",
        "memory-bank/activeContext.md",
        "memory-bank/progress.md"
    )
    
    $missingFiles = @()
    $invalidFiles = @()
    
    # Check if required files exist
    foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
            $missingFiles += $file
        } else {
            # Check if file is readable
            try {
                Get-Content $file -ErrorAction Stop | Out-Null
            } catch {
                $invalidFiles += "$file (unreadable: $($_.Exception.Message))"
            }
        }
    }
    
    # Check Memory Bank directory
    if (-not (Test-Path "memory-bank" -PathType Container)) {
        $missingFiles += "memory-bank (directory)"
    }
    
    # Display results
    if ($missingFiles.Count -eq 0 -and $invalidFiles.Count -eq 0) {
        Write-Output "‚úÖ All required files verified successfully"
        return $true
    } else {
        if ($missingFiles.Count -gt 0) {
            Write-Output "‚ùå Missing files: $($missingFiles -join ', ')"
        }
        if ($invalidFiles.Count -gt 0) {
            Write-Output "‚ùå Invalid files: $($invalidFiles -join ', ')"
        }
        return $false
    }
}
```

## üìã FILE VERIFICATION CHECKPOINT

```
‚úì CHECKPOINT: FILE VERIFICATION
- Memory Bank directory exists? [YES/NO]
- All required files exist? [YES/NO]
- All files readable and valid? [YES/NO]

‚Üí If all YES: Continue to Dependency Verification.
‚Üí If any NO: Fix file issues before continuing.
```

**Next Step (on PASS):** Load `van-qa-checks/dependency-check.mdc`.
**Next Step (on FAIL):** Check `van-qa-utils/common-fixes.mdc` for file verification fixes.